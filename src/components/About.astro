---
// Componente About con línea temporal
---

<section id="about" class="about">
  <div class="about-container">
    <div class="about-header">
      <h2 class="section-title">
        <span class="text-gradient">My Journey</span>
      </h2>
      <p class="section-subtitle">
        A timeline of my professional and academic experience
      </p>
    </div>

    <div class="timeline">
      <!-- Línea central base -->
      <div class="timeline-line-base"></div>
      <!-- Línea central que se rellena con scroll -->
      <div class="timeline-line-progress"></div>

      <!-- Educación - Izquierda -->
      <div class="timeline-item left" data-aos="fade-right" data-aos-delay="100">
        <div class="timeline-marker education" data-marker="1">
          <img src="/img/USC_logo.png" alt="USC Logo" class="logo-full">
        </div>
        <!-- Círculos adicionales para múltiples logos -->
        <div class="additional-circles">
          <div class="additional-circle circle-1 education">
            <img src="/img/lodz_logo.png" alt="Lodz University Logo" class="logo-full">
          </div>
        </div>
        <div class="timeline-content">
          <div class="timeline-date">2017 - 2021</div>
          <div class="timeline-institution">
            <h3>Grado en Matemáticas</h3>
            <p class="institution-names">Universidade de Santiago de Compostela • Lodz University</p>
            <ul class="achievements">
              <li>Average grade of the record: 8.4</li>
              <li>TFG: Computational Geometry</li>
            </ul>
          </div>
        </div>
      </div>

      <!-- Máster - Derecha -->
      <div class="timeline-item right" data-aos="fade-left" data-aos-delay="200">
        <div class="timeline-marker education" data-marker="2">
          <img src="/img/UCM_logo.svg" alt="UCM Logo" class="logo-full">
        </div>
        <div class="timeline-content">
          <div class="timeline-date">2021 - 2022</div>
          <div class="timeline-institution">
            <h3>Máster en Big Data & Data Science</h3>
            <p class="institution-names">Universidad Complutense de Madrid</p>
            <ul class="achievements">
              <li>Average grade of the record: 8.2</li>
              <li>TFM: KKBox Music Recommendation Challenge</li>
            </ul>
          </div>
        </div>
      </div>

      <!-- Data Analyst - Izquierda -->
      <div class="timeline-item left" data-aos="fade-right" data-aos-delay="300">
        <div class="timeline-marker work" data-marker="3">
          <img src="/img/minsait_logo.jpeg" alt="Minsait Logo" class="logo-full">
        </div>
        <!-- Círculos adicionales para múltiples logos -->
        <div class="additional-circles">
          <div class="additional-circle circle-1 work">
            <img src="/img/indra_logo.jpg" alt="Indra Logo" class="logo-full">
          </div>
          <div class="additional-circle circle-2 work">
            <img src="/img/itx_logo.png" alt="Inditex Logo" class="logo-full">
          </div>
        </div>
        <div class="timeline-content">
          <div class="timeline-date">2021 - 2023</div>
          <div class="timeline-institution">
            <h3>Data Analyst</h3>
            <p class="institution-names">Indra • Minsait</p>
            <p class="role-description">Business Intelligence and financial reporting</p>
            <ul class="achievements">
              <li>Development and restyling of reports in PowerBI, SSRS</li>
              <li>Migrating data and SQL procedures to DB2, Oracle, and Snowflake</li>
            </ul>
          </div>
        </div>
      </div>

      <!-- Data Consultant - Derecha -->
      <div class="timeline-item right" data-aos="fade-left" data-aos-delay="400">
        <div class="timeline-marker work current" data-marker="4">
          <img src="/img/minsait_logo.jpeg" alt="Minsait Logo" class="logo-full">
        </div>
        <!-- Círculos adicionales para múltiples logos -->
        <div class="additional-circles">
          <div class="additional-circle circle-1 work">
            <img src="/img/indra_logo.jpg" alt="Indra Logo" class="logo-full">
          </div>
          <div class="additional-circle circle-2 current">
            <img src="/img/itx_logo.png" alt="Inditex Logo" class="logo-full">
          </div>
        </div>
        <div class="timeline-content">
          <div class="timeline-date">2023 - Actualidad</div>
          <div class="timeline-institution">
            <h3>Data Consultant</h3>
            <p class="institution-names">Indra • Minsait</p>
            <p class="role-description">MAGI-C Project: Calculation of Gross Margin and Valuation of Inditex's Stock with different corporate perspectives of the company</p>
            <ul class="achievements">
              <li>Developing SQL procedures in Snowflake. Calculation, data processing, task scheduling, orchestration, controls, and validation</li>
              <li>Power BI development, integration with the frontend of the calculation application.</li>
              <li>Communication and problem resolution in direct contact with the end customer</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .about {
    min-height: 100vh;
    padding: 5rem 2rem;
    position: relative;
    /* Sin background aquí - se movió al contenedor */
  }

  .about-container {
    max-width: 1400px;
    margin: 0 auto;
    position: relative;
    background: linear-gradient(135deg, 
      rgba(15, 15, 35, 0.95) 0%, 
      rgba(25, 25, 55, 0.95) 50%, 
      rgba(15, 15, 35, 0.95) 100%
    );
    backdrop-filter: blur(20px);
    border-radius: 24px;
    padding: 4rem 3rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  }

  .about-header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .section-title {
    font-size: clamp(2.5rem, 6vw, 4rem);
    font-weight: 700;
    margin-bottom: 1rem;
    opacity: 0;
    transform: translateY(30px);
    animation: fadeInUp 0.8s ease-out 0.2s forwards;
  }

  .section-subtitle {
    font-size: clamp(1.1rem, 2.5vw, 1.3rem);
    color: var(--text-secondary);
    max-width: 600px;
    margin: 0 auto;
    opacity: 0;
    transform: translateY(30px);
    animation: fadeInUp 0.8s ease-out 0.4s forwards;
  }

  .timeline {
    position: relative;
    max-width: 1600px;
    margin: 0 auto;
    padding: 2rem 0;
  }

  .timeline-line-base {
    position: absolute;
    left: 50%;
    top: 0;
    width: 3px;
    background: rgba(139, 92, 246, 0.2);
    transform: translateX(-50%);
    z-index: -10;
  }

  .timeline-line-progress {
    position: absolute;
    left: 50%;
    top: 0;
    width: 3px;
    background: linear-gradient(180deg, 
      var(--accent-primary) 0%, 
      var(--accent-secondary) 50%, 
      var(--accent-primary) 100%
    );
    transform: translateX(-50%);
    z-index: -5;
    height: 0%;
    transition: height 0.5s ease-out;
  }

  .timeline-item {
    position: relative;
    margin: 4rem 0;
    opacity: 0;
    transform: translateY(50px);
    display: flex;
    align-items: center;
    min-height: 200px;
    width: 100%;
  }

  .timeline-item[data-aos="fade-right"] {
    animation: fadeInRight 0.8s ease-out forwards;
  }

  .timeline-item[data-aos="fade-left"] {
    animation: fadeInLeft 0.8s ease-out forwards;
  }

  /* Items a la izquierda */
  .timeline-item.left {
    justify-content: flex-start;
  }

  .timeline-item.left .timeline-content {
    margin-right: 3rem;
    text-align: right;
    margin-left: auto;
    width: 50%;
  }

  .timeline-item.left .timeline-marker {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    z-index: 100 !important;
  }

  /* Items a la derecha */
  .timeline-item.right {
    justify-content: flex-end;
  }

  .timeline-item.right .timeline-content {
    margin-left: 3rem;
    text-align: left;
    margin-right: auto;
    width: 50%;
  }

  .timeline-item.right .timeline-marker {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    z-index: 100 !important;
  }

  .timeline-marker {
    position: relative;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 100px;
    height: 100px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 100 !important;
    transition: box-shadow 0.3s ease, border-color 0.3s ease;
    border: 3px solid rgba(255, 255, 255, 0.2);
  }

  .timeline-marker.education {
    background: linear-gradient(135deg, #4f46e5, #7c3aed);
    box-shadow: 0 0 30px rgba(79, 70, 229, 0.4);
  }

  .timeline-marker.work {
    background: linear-gradient(135deg, #059669, #0d9488);
    box-shadow: 0 0 30px rgba(5, 150, 105, 0.4);
  }

  .timeline-marker.current {
    background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
    box-shadow: 0 0 30px rgba(139, 92, 246, 0.5);
    animation: pulse 2s infinite;
  }

  .timeline-marker.activated {
    box-shadow: 0 0 40px rgba(139, 92, 246, 0.6);
    border-color: rgba(139, 92, 246, 0.5);
  }

  .timeline-marker.spark-effect {
    animation: sparkBurst 0.8s ease-out;
  }

  /* ===== CÍRCULOS ADICIONALES ===== */
  .additional-circles {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 97;
    pointer-events: none;
    width: 300px;
    height: 100px;
  }

  .additional-circle {
    position: absolute;
    width: 80px;
    height: 80px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 3px solid rgba(255, 255, 255, 0.2);
    opacity: 0;
    scale: 0.3;
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 98;
  }

  /* Estilos de círculos adicionales según tipo */
  .additional-circle.education {
    background: linear-gradient(135deg, #4f46e5, #7c3aed);
    box-shadow: 0 0 30px rgba(79, 70, 229, 0.4);
  }

  .additional-circle.work {
    background: linear-gradient(135deg, #059669, #0d9488);
    box-shadow: 0 0 30px rgba(5, 150, 105, 0.4);
  }

  .additional-circle.current {
    background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
    box-shadow: 0 0 30px rgba(139, 92, 246, 0.5);
  }

  /* Posicionamiento inicial - comenzando desde el centro del timeline-marker */
  .timeline-item.left .additional-circle.circle-1 {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .timeline-item.left .additional-circle.circle-2 {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  /* Posicionamiento para items derechos */
  .timeline-item.right .additional-circle.circle-1 {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .timeline-item.right .additional-circle.circle-2 {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  /* Activación con animación hacia posiciones finales */
  .timeline-item.left .timeline-marker.activated ~ .additional-circles .additional-circle.circle-1 {
    opacity: 1;
    scale: 1;
    transform: translate(-145px, -50%);
    animation: slideFromCenter 0.8s cubic-bezier(0.4, 0, 0.2, 1) 0.3s both;
  }

  .timeline-item.left .timeline-marker.activated ~ .additional-circles .additional-circle.circle-2 {
    opacity: 1;
    scale: 1;
    transform: translate(-240px, -50%);
    animation: slideFromCenter 0.8s cubic-bezier(0.4, 0, 0.2, 1) 0.6s both;
  }

  .timeline-item.right .timeline-marker.activated ~ .additional-circles .additional-circle.circle-1 {
    opacity: 1;
    scale: 1;
    transform: translate(65px, -50%);
    animation: slideFromCenter 0.8s cubic-bezier(0.4, 0, 0.2, 1) 0.3s both;
  }

  .timeline-item.right .timeline-marker.activated ~ .additional-circles .additional-circle.circle-2 {
    opacity: 1;
    scale: 1;
    transform: translate(160px, -50%);
    animation: slideFromCenter 0.8s cubic-bezier(0.4, 0, 0.2, 1) 0.6s both;
  }

  /* Logos dentro de círculos adicionales */
  .additional-circle .logo-full {
    width: 85%;
    height: 85%;
    object-fit: contain;
    background: white;
    border-radius: 50%;
    padding: 2px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
  }

  .marker-logos {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 2px;
    position: relative;
    z-index: 11;
  }

  .logo-mini {
    background: rgba(255, 255, 255, 0.15);
    border-radius: 6px;
    padding: 3px 6px;
    font-size: 0.6rem;
    font-weight: 700;
    color: white;
    letter-spacing: 0.05em;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    position: relative;
    z-index: 12;
  }

  .timeline-content {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    padding: 2rem;
    max-width: 500px;
    position: relative;
    transition: all 0.3s ease;
    min-height: 150px;
  }

  .timeline-content:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
    border-color: rgba(139, 92, 246, 0.3);
  }

  .timeline-content.highlighted {
    border-color: rgba(139, 92, 246, 0.5);
    box-shadow: 0 0 30px rgba(139, 92, 246, 0.2);
    transform: translateY(-2px);
  }

  .timeline-date {
    font-size: 0.9rem;
    color: var(--accent-primary);
    font-weight: 600;
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .timeline-institution h3 {
    font-size: 1.4rem;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
    font-weight: 600;
  }

  .institution-names {
    color: var(--text-secondary);
    font-size: 1rem;
    margin-bottom: 1rem;
  }

  .role-description {
    color: var(--text-secondary);
    font-style: italic;
    margin-bottom: 1.5rem;
    line-height: 1.5;
  }

  .achievements {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.875rem;
  }

  .achievements li {
    position: relative;
    padding: 0.75rem 0.875rem 0.75rem 2.5rem;
    margin: 0;
    color: var(--text-secondary);
    line-height: 1.6;
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 12px;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    font-size: 0.95rem;
  }

  .achievements li:hover {
    background: rgba(139, 92, 246, 0.08);
    border-color: rgba(139, 92, 246, 0.2);
    transform: translateX(3px);
  }

  .achievements li::before {
    content: '';
    position: absolute;
    left: 0.875rem;
    top: 50%;
    transform: translateY(-50%);
    width: 8px;
    height: 8px;
    background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
    border-radius: 50%;
    box-shadow: 0 0 10px rgba(139, 92, 246, 0.4);
  }

  .achievements li::after {
    content: '';
    position: absolute;
    left: 0.5rem;
    top: 50%;
    transform: translateY(-50%);
    width: 16px;
    height: 16px;
    background: rgba(139, 92, 246, 0.1);
    border-radius: 50%;
    z-index: -1;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeInRight {
    from {
      opacity: 0;
      transform: translateX(-50px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes fadeInLeft {
    from {
      opacity: 0;
      transform: translateX(50px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes pulse {
    0%, 100% {
      box-shadow: 0 0 30px rgba(139, 92, 246, 0.5);
    }
    50% {
      box-shadow: 0 0 50px rgba(139, 92, 246, 0.8);
    }
  }

  @keyframes markerActivated {
    0% {
      box-shadow: 0 0 30px rgba(139, 92, 246, 0.4);
    }
    50% {
      box-shadow: 0 0 50px rgba(139, 92, 246, 0.8);
    }
    100% {
      box-shadow: 0 0 40px rgba(139, 92, 246, 0.6);
    }
  }

  @keyframes sparkBurst {
    0% {
      box-shadow: 
        0 0 30px rgba(139, 92, 246, 0.4),
        0 0 0 0 rgba(139, 92, 246, 0.7);
    }
    25% {
      box-shadow: 
        0 0 40px rgba(139, 92, 246, 0.6),
        0 0 10px 5px rgba(139, 92, 246, 0.4);
    }
    50% {
      box-shadow: 
        0 0 50px rgba(139, 92, 246, 0.8),
        0 0 20px 10px rgba(139, 92, 246, 0.2);
    }
    75% {
      box-shadow: 
        0 0 60px rgba(139, 92, 246, 0.6),
        0 0 30px 15px rgba(139, 92, 246, 0.1);
    }
    100% {
      box-shadow: 
        0 0 40px rgba(139, 92, 246, 0.6),
        0 0 0 0 rgba(139, 92, 246, 0);
    }
  }

  @keyframes slideFromCenter {
    0% {
      opacity: 0;
      scale: 0.3;
      transform: translate(-50%, -50%);
      box-shadow: 0 0 0 rgba(0, 0, 0, 0);
    }
    50% {
      opacity: 0.8;
      scale: 0.9;
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
    }
    100% {
      opacity: 1;
      scale: 1;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
    }
  }

  /* Asegurar que el texto de los markers esté siempre visible */
  .timeline-marker * {
    position: relative;
    z-index: 101 !important;
  }

  .timeline-marker::before,
  .timeline-marker::after {
    z-index: -1 !important;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .about {
      padding: 2rem 1rem;
    }

    .about-container {
      padding: 2rem 1.5rem;
      border-radius: 16px;
    }

    .timeline-line-base,
    .timeline-line-progress {
      left: 30px;
    }

    .timeline-marker {
      left: 30px !important;
      width: 70px;
      height: 70px;
      transform: translate(-50%, -50%) !important;
    }

    .logo-mini {
      font-size: 0.4rem;
      padding: 1px 3px;
    }

    .logo-full {
      width: 90%;
      height: 90%;
      padding: 1px;
    }

    .timeline-item {
      justify-content: flex-start !important;
      margin: 2rem 0;
    }

    .timeline-content {
      width: calc(100% - 110px) !important;
      max-width: none !important;
      margin-left: 90px !important;
      margin-right: 0 !important;
      text-align: left !important;
      padding: 1.5rem;
    }

    /* Círculos adicionales en móvil */
    .additional-circles {
      width: 200px;
      height: 70px;
    }

    .additional-circle {
      width: 50px;
      height: 50px;
      border-width: 1px;
    }

    .timeline-item.left .timeline-marker.activated ~ .additional-circles .additional-circle.circle-1 {
      transform: translate(-70px, -50%);
    }

    .timeline-item.left .timeline-marker.activated ~ .additional-circles .additional-circle.circle-2 {
      transform: translate(-140px, -50%);
    }

    .timeline-item.right .timeline-marker.activated ~ .additional-circles .additional-circle.circle-1 {
      transform: translate(70px, -50%);
    }

    .timeline-item.right .timeline-marker.activated ~ .additional-circles .additional-circle.circle-2 {
      transform: translate(140px, -50%);
    }

    /* Ocultar círculos adicionales en pantallas muy pequeñas */
    @media (max-width: 480px) {
      .additional-circles {
        display: none;
      }
    }
  }

  /* Reduce motion for accessibility */
  @media (prefers-reduced-motion: reduce) {
    .timeline-item,
    .section-title,
    .section-subtitle {
      animation: none;
      opacity: 1;
      transform: none;
    }

    .timeline-line {
      animation: none;
      opacity: 1;
    }

    .timeline-marker.current {
      animation: none;
    }

    .timeline-content:hover {
      transform: none;
    }
  }

  .logo-full {
    width: 90%;
    height: 90%;
    object-fit: contain;
    background: white;
    border-radius: 50%;
    padding: 2px;
    position: relative;
    z-index: 12;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }
</style>

<script>
  // Intersection Observer para animaciones y efecto de línea temporal discreto
  document.addEventListener('DOMContentLoaded', () => {
    const timelineItems = document.querySelectorAll('.timeline-item');
    const timelineProgress = document.querySelector('.timeline-line-progress') as HTMLElement;
    const timeline = document.querySelector('.timeline') as HTMLElement;
    const markers = document.querySelectorAll('.timeline-marker');
    
    let currentActivePoint = -1;
    let isAnimating = false;
    
    // Configurar animaciones de elementos
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const element = entry.target as HTMLElement;
          const delay = element.getAttribute('data-aos-delay') || '0';
          const animationType = element.getAttribute('data-aos') || 'fade-up';
          
          setTimeout(() => {
            if (animationType === 'fade-right') {
              element.style.animation = 'fadeInRight 0.8s ease-out forwards';
            } else if (animationType === 'fade-left') {
              element.style.animation = 'fadeInLeft 0.8s ease-out forwards';
            } else {
              element.style.animation = 'fadeInUp 0.8s ease-out forwards';
            }
          }, parseInt(delay));
          
          observer.unobserve(element);
        }
      });
    }, {
      threshold: 0.3
    });

    timelineItems.forEach((item) => {
      observer.observe(item);
    });

    // Función para animar hasta un punto específico
    const animateToPoint = (pointIndex: number) => {
      if (isAnimating || pointIndex === currentActivePoint) return;
      
      isAnimating = true;
      const targetItem = timelineItems[pointIndex];
      const targetMarker = targetItem?.querySelector('.timeline-marker') as HTMLElement;
      
      if (!targetItem || !targetMarker || !timeline || !timelineProgress) {
        isAnimating = false;
        return;
      }
      
      // Calcular posición del marcador específicamente
      const timelineRect = timeline.getBoundingClientRect();
      const timelineTop = timelineRect.top + window.scrollY;
      const markerRect = targetMarker.getBoundingClientRect();
      const markerTop = markerRect.top + window.scrollY;
      const markerCenter = markerTop + (markerRect.height / 2);
      
      // Calcular progreso hasta el centro del marcador
      const relativePosition = markerCenter - timelineTop;
      const progressPercentage = Math.min(100, Math.max(0, (relativePosition / timelineRect.height) * 100));
      
      // Animar la línea hasta el marcador
      timelineProgress.style.transition = 'height 0.8s cubic-bezier(0.4, 0, 0.2, 1)';
      timelineProgress.style.height = `${progressPercentage}%`;
      
      // Actualizar marcadores
      markers.forEach((marker, index) => {
        const markerElement = marker as HTMLElement;
        if (index <= pointIndex) {
          markerElement.classList.add('activated');
          // Efecto de chispas solo en el nuevo marcador
          if (index === pointIndex && index > currentActivePoint) {
            markerElement.classList.add('spark-effect');
            setTimeout(() => {
              markerElement.classList.remove('spark-effect');
            }, 800);
          }
        } else {
          markerElement.classList.remove('activated', 'spark-effect');
        }
      });
      
      // Actualizar contenidos
      timelineItems.forEach((item, index) => {
        const content = item.querySelector('.timeline-content') as HTMLElement;
        if (content) {
          if (index === pointIndex) {
            content.classList.add('highlighted');
          } else {
            content.classList.remove('highlighted');
          }
        }
      });
      
      currentActivePoint = pointIndex;
      
      setTimeout(() => {
        isAnimating = false;
      }, 800);
    };

    // Detectar qué punto debe estar activo basado en el scroll
    const updateTimelineProgress = () => {
      if (isAnimating || !timeline || timelineItems.length === 0) return;
      
      // Determinar qué marcador está más centrado en la pantalla
      let targetPoint = -1;
      let minDistance = Infinity;
      
      timelineItems.forEach((item, index) => {
        const marker = item.querySelector('.timeline-marker') as HTMLElement;
        if (!marker) return;
        
        const markerRect = marker.getBoundingClientRect();
        const markerCenter = markerRect.top + markerRect.height / 2;
        const screenCenter = window.innerHeight / 2;
        const distance = Math.abs(markerCenter - screenCenter);
        
        // Solo considerar marcadores que están visibles
        const isVisible = markerRect.top < window.innerHeight && markerRect.bottom > 0;
        
        if (isVisible && distance < minDistance) {
          minDistance = distance;
          // Solo activar si el marcador está suficientemente centrado
          if (distance < window.innerHeight * 0.3) {
            targetPoint = index;
          }
        }
      });
      
      // Si estamos muy arriba de la timeline, no activar ningún punto
      const timelineRect = timeline.getBoundingClientRect();
      if (timelineRect.top > window.innerHeight * 0.6) {
        targetPoint = -1;
      }
      
      // Si hay un cambio de punto, animar
      if (targetPoint !== currentActivePoint && targetPoint >= -1) {
        if (targetPoint === -1) {
          // Reset - volver al inicio
          if (!isAnimating) {
            isAnimating = true;
            timelineProgress.style.transition = 'height 0.5s ease-out';
            timelineProgress.style.height = '0%';
            
            markers.forEach((marker) => {
              (marker as HTMLElement).classList.remove('activated', 'spark-effect');
            });
            
            timelineItems.forEach((item) => {
              const content = item.querySelector('.timeline-content') as HTMLElement;
              if (content) content.classList.remove('highlighted');
            });
            
            currentActivePoint = -1;
            setTimeout(() => { isAnimating = false; }, 500);
          }
        } else {
          animateToPoint(targetPoint);
        }
      }
    };

    // Calcular la altura de las líneas para que terminen en el último círculo
    const calculateTimelineHeight = () => {
      const timeline = document.querySelector('.timeline') as HTMLElement;
      const lastMarker = document.querySelector('.timeline-item:last-child .timeline-marker') as HTMLElement;
      const timelineLineBase = document.querySelector('.timeline-line-base') as HTMLElement;
      const timelineLineProgress = document.querySelector('.timeline-line-progress') as HTMLElement;
      
      if (timeline && lastMarker && timelineLineBase && timelineLineProgress) {
        const timelineRect = timeline.getBoundingClientRect();
        const lastMarkerRect = lastMarker.getBoundingClientRect();
        
        // Calcular la posición relativa del último marcador
        const timelineTop = timeline.offsetTop;
        const lastMarkerTop = lastMarker.offsetTop + (lastMarker.offsetHeight / 2);
        const relativeHeight = lastMarkerTop - timelineTop;
        
        // Establecer la altura de las líneas
        timelineLineBase.style.height = `${relativeHeight}px`;
        timelineLineBase.style.bottom = 'auto';
        
        // La línea de progreso ya se maneja en updateTimelineProgress
      }
    };

    // Event listeners con throttling optimizado
    let scrollTimeout: ReturnType<typeof setTimeout> | null = null;
    const throttledUpdate = () => {
      if (scrollTimeout) return;
      
      scrollTimeout = setTimeout(() => {
        updateTimelineProgress();
        scrollTimeout = null;
      }, 16); // ~60fps
    };

    window.addEventListener('scroll', throttledUpdate);
    window.addEventListener('resize', () => {
      // Reset completo en resize
      currentActivePoint = -1;
      isAnimating = false;
      setTimeout(() => {
        calculateTimelineHeight();
        updateTimelineProgress();
      }, 100);
    });
    
    // Inicialización
    setTimeout(() => {
      updateTimelineProgress();
      calculateTimelineHeight();
    }, 1000);
  });
</script>
