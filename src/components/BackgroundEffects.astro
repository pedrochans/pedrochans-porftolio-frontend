---
// Componente de efectos de fondo animados
export interface Props {
  variant?: 'particles' | 'gradient' | 'stars';
}

const { variant = 'particles' } = Astro.props;
---

<div class={`background-effects ${variant}`}>
  {variant === 'particles' && (
    <div class="particles-container">
      {/* Reduce particles from 100 to 30 for better performance */}
      {Array.from({ length: 30 }).map((_, i) => (
        <div 
          class="particle" 
          style={`
            --delay: ${(i * 2) % 10}s; 
            --duration: ${15 + (i % 10)}s;
            --size: ${1 + (i % 3)}px;
            --x: ${(i * 13) % 100}%;
          `}
        ></div>
      ))}
    </div>
  )}
  
  {variant === 'stars' && (
    <div class="stars-container">
      {/* Reduce stars from 200 to 60 for better performance */}
      {Array.from({ length: 60 }).map((_, i) => (
        <div 
          class="star" 
          style={`
            --delay: ${(i * 0.5) % 5}s;
            --x: ${(i * 7) % 100}%;
            --y: ${(i * 11) % 100}%;
            --size: ${0.5 + (i % 3) * 0.5}px;
          `}
        ></div>
      ))}
    </div>
  )}
  
  <div class="gradient-overlay"></div>
</div>

<style>
  .background-effects {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    overflow: hidden;
    pointer-events: none;
    /* Enable hardware acceleration */
    will-change: transform;
    transform: translateZ(0);
  }

  /* Gradient Overlay - Simplified animation */
  .gradient-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(
      ellipse 80% 50% at 50% -20%, 
      rgba(59, 130, 246, 0.1) 0%, 
      transparent 50%
    ),
    radial-gradient(
      ellipse 60% 50% at 80% 50%, 
      rgba(59, 130, 246, 0.08) 0%, 
      transparent 50%
    );
    /* Simplified animation - less intensive */
    animation: gradientMove 30s ease-in-out infinite;
  }

  @keyframes gradientMove {
    0%, 100% {
      opacity: 0.8;
    }
    50% {
      opacity: 1;
    }
  }

  /* Particles Effect - Optimized */
  .particles-container {
    position: relative;
    width: 100%;
    height: 100%;
    /* Enable hardware acceleration for container */
    will-change: transform;
    transform: translateZ(0);
  }

  .particle {
    position: absolute;
    left: var(--x);
    width: var(--size, 2px);
    height: var(--size, 2px);
    background: rgba(59, 130, 246, 0.6);
    border-radius: 50%;
    /* Simplified animation - single transform-based animation */
    animation: particleFloat var(--duration, 20s) var(--delay, 0s) infinite linear;
    /* Enable hardware acceleration */
    will-change: transform;
    backface-visibility: hidden;
  }

  @keyframes particleFloat {
    0% {
      transform: translate3d(0, 100vh, 0) scale(0);
      opacity: 0;
    }
    10% {
      opacity: 1;
      transform: translate3d(0, 90vh, 0) scale(1);
    }
    90% {
      opacity: 1;
      transform: translate3d(100px, 10vh, 0) scale(1);
    }
    100% {
      transform: translate3d(200px, -10vh, 0) scale(0);
      opacity: 0;
    }
  }

  /* Stars Effect - Optimized */
  .stars-container {
    position: relative;
    width: 100%;
    height: 100%;
    /* Enable hardware acceleration */
    will-change: transform;
    transform: translateZ(0);
  }

  .star {
    position: absolute;
    left: var(--x);
    top: var(--y);
    width: var(--size, 1px);
    height: var(--size, 1px);
    background: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    /* Simplified single animation */
    animation: starTwinkle 4s var(--delay, 0s) infinite ease-in-out;
    /* Enable hardware acceleration */
    will-change: opacity;
    backface-visibility: hidden;
  }

  .star:nth-child(3n) {
    background: rgba(59, 130, 246, 0.6);
  }

  .star:nth-child(5n) {
    background: rgba(6, 182, 212, 0.6);
  }

  @keyframes starTwinkle {
    0%, 100% {
      opacity: 0.3;
    }
    50% {
      opacity: 1;
    }
  }

  /* Responsive adjustments - More visible particles on mobile */
  @media (max-width: 768px) {
    .particle {
      --size: 2px !important;
      background: rgba(59, 130, 246, 0.8) !important;
    }
    
    /* Show more particles on mobile instead of hiding them */
    .particles-container .particle:nth-child(4n) {
      display: none;
    }
    
    /* Show more stars on mobile */
    .stars-container .star:nth-child(3n) {
      display: none;
    }
    
    .star {
      background: rgba(255, 255, 255, 0.9) !important;
    }
    
    .star:nth-child(3n) {
      background: rgba(59, 130, 246, 0.8) !important;
    }
    
    .star:nth-child(5n) {
      background: rgba(6, 182, 212, 0.8) !important;
    }
    
    /* Keep gradient animation on mobile for better visual effect */
    .gradient-overlay {
      animation: gradientMove 30s ease-in-out infinite;
      background: radial-gradient(
        ellipse 80% 50% at 50% -20%, 
        rgba(59, 130, 246, 0.15) 0%, 
        transparent 50%
      ),
      radial-gradient(
        ellipse 60% 50% at 80% 50%, 
        rgba(59, 130, 246, 0.12) 0%, 
        transparent 50%
      );
    }
  }

  @media (max-width: 480px) {
    /* Keep more particles on small screens but make them more visible */
    .particles-container .particle:nth-child(n+21) {
      display: none;
    }
    
    .stars-container .star:nth-child(n+31) {
      display: none;
    }
    
    .particle {
      --size: 1.5px !important;
      background: rgba(59, 130, 246, 0.9) !important;
    }
  }

  /* Reduce motion for accessibility and performance */
  @media (prefers-reduced-motion: reduce) {
    .particle,
    .star,
    .gradient-overlay {
      animation: none;
    }
    
    .particle {
      opacity: 0.3;
      transform: translate3d(0, 50vh, 0);
    }
    
    .star {
      opacity: 0.5;
    }
  }

  /* Performance optimization for low-end devices */
  @media (max-width: 768px) and (max-height: 600px) {
    .particles-container,
    .stars-container {
      display: none;
    }
  }
</style>

<script>
  // Optimized script - avoid random calculations during runtime
  document.addEventListener('DOMContentLoaded', () => {
    // Use requestAnimationFrame for better performance
    requestAnimationFrame(() => {
      const particles = document.querySelectorAll('.particle');
      
      // Pre-calculate positions to avoid runtime calculations
      particles.forEach((particle, index) => {
        // Use deterministic positioning based on index
        const left = (index * 17) % 100; // Pseudo-random but deterministic
        
        (particle as HTMLElement).style.left = `${left}%`;
      });

      const stars = document.querySelectorAll('.star');
      
      stars.forEach((star, index) => {
        // Use deterministic positioning
        const x = (index * 13) % 100;
        const y = (index * 23) % 100;
        
        (star as HTMLElement).style.setProperty('--x', `${x}%`);
        (star as HTMLElement).style.setProperty('--y', `${y}%`);
      });
    });
  });
</script>
